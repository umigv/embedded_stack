
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b4  080052b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052bc  080052bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  2000000c  080052d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  080052d0  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012567  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253c  00000000  00000000  000325a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00034ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00035ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c0e  00000000  00000000  000369d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012824  00000000  00000000  000585e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf30c  00000000  00000000  0006ae0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a116  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004444  00000000  00000000  0013a168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800527c 	.word	0x0800527c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800527c 	.word	0x0800527c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_TIM_PWM_PulseFinishedCallback>:
  uint32_t data;
} PixelRGB_t;

// Mystery function
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_3);
 8000510:	2108      	movs	r1, #8
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f003 f9fc 	bl	8003910 <HAL_TIM_PWM_Stop_DMA>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <HAL_GPIO_EXTI_Callback>:

// Interrupt code
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
	// invert is_blinking boolean
    if (GPIO_Pin == GPIO_PIN_13) { // INT Source is pin A9
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000530:	d10e      	bne.n	8000550 <HAL_GPIO_EXTI_Callback+0x30>
    	is_blinking = !is_blinking;
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	f083 0301 	eor.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	b2da      	uxtb	r2, r3
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <HAL_GPIO_EXTI_Callback+0x3c>)
 800054e:	701a      	strb	r2, [r3, #0]
    }
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	20000028 	.word	0x20000028

08000560 <blink_or_not>:
// Handles blinking/solid color on led.
// Arguments:
// uint8_t RGB values for solid color: uint8_t r2, uint8_t g2, uint8_t b2,
// uint8_t RGB values for blinking color: uint8_t r, uint8_t g, uint8_t b,
// pointers to timer handle typedef 2 and 9: TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim9
void blink_or_not(uint8_t r2, uint8_t g2, uint8_t b2, uint8_t r, uint8_t g, uint8_t b, TIM_HandleTypeDef* htim2, TIM_HandleTypeDef* htim9){
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	f5ad 6d9a 	sub.w	sp, sp, #1232	; 0x4d0
 8000566:	af00      	add	r7, sp, #0
 8000568:	4605      	mov	r5, r0
 800056a:	460c      	mov	r4, r1
 800056c:	4610      	mov	r0, r2
 800056e:	4619      	mov	r1, r3
 8000570:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000574:	f2a3 43c9 	subw	r3, r3, #1225	; 0x4c9
 8000578:	462a      	mov	r2, r5
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000580:	f2a3 43ca 	subw	r3, r3, #1226	; 0x4ca
 8000584:	4622      	mov	r2, r4
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800058c:	f2a3 43cb 	subw	r3, r3, #1227	; 0x4cb
 8000590:	4602      	mov	r2, r0
 8000592:	701a      	strb	r2, [r3, #0]
 8000594:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000598:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 800059c:	460a      	mov	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]

	// get an array of 'pixels'
	PixelRGB_t pixel[NUM_PIXELS] = {0};
 80005a0:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 80005a4:	2230      	movs	r2, #48	; 0x30
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f004 fe5f 	bl	800526c <memset>

	// mystery
	uint32_t dmaBuffer[DMA_BUFF_SIZE] = {0};
 80005ae:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80005b2:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 80005b6:	4618      	mov	r0, r3
 80005b8:	f240 4384 	movw	r3, #1156	; 0x484
 80005bc:	461a      	mov	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f004 fe54 	bl	800526c <memset>
	uint32_t *pBuff;

	// get initial timer values
	uint16_t timer_val2 = __HAL_TIM_GET_COUNTER(htim9);
 80005c4:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005cc:	f8a7 34ca 	strh.w	r3, [r7, #1226]	; 0x4ca
	uint16_t timer_val = __HAL_TIM_GET_COUNTER(htim9);
 80005d0:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d8:	f8a7 34c8 	strh.w	r3, [r7, #1224]	; 0x4c8

	// infinite loop
	while(1){

		// if blinking mode
		if (is_blinking){
 80005dc:	4b76      	ldr	r3, [pc, #472]	; (80007b8 <blink_or_not+0x258>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d047      	beq.n	8000674 <blink_or_not+0x114>

			// if difference between current timer value and last timer value (time elapsed)
			// is greater than 1/4 of 8 bit timer (16384), then switch state
			if (__HAL_TIM_GET_COUNTER(htim9) - timer_val >= 16384){
 80005e4:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005ec:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	; 0x4c8
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005f6:	d364      	bcc.n	80006c2 <blink_or_not+0x162>

				// off state
				if (pixel[0].color.g != 0 || pixel[0].color.b != 0 || pixel[0].color.r != 0){
 80005f8:	f897 348e 	ldrb.w	r3, [r7, #1166]	; 0x48e
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d107      	bne.n	8000610 <blink_or_not+0xb0>
 8000600:	f897 348c 	ldrb.w	r3, [r7, #1164]	; 0x48c
 8000604:	2b00      	cmp	r3, #0
 8000606:	d103      	bne.n	8000610 <blink_or_not+0xb0>
 8000608:	f897 348d 	ldrb.w	r3, [r7, #1165]	; 0x48d
 800060c:	2b00      	cmp	r3, #0
 800060e:	d009      	beq.n	8000624 <blink_or_not+0xc4>
					pixel[0].color.g = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 348e 	strb.w	r3, [r7, #1166]	; 0x48e
					pixel[0].color.r = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
					pixel[0].color.b = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	f887 348c 	strb.w	r3, [r7, #1164]	; 0x48c
 8000622:	e020      	b.n	8000666 <blink_or_not+0x106>
				}

				// on state
				else {
					pixel[0].color.g = g;
 8000624:	f897 34e0 	ldrb.w	r3, [r7, #1248]	; 0x4e0
 8000628:	f887 348e 	strb.w	r3, [r7, #1166]	; 0x48e
					pixel[0].color.r = r;
 800062c:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000630:	f2a3 43cc 	subw	r3, r3, #1228	; 0x4cc
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
					pixel[0].color.b = b;
 800063a:	f897 34e4 	ldrb.w	r3, [r7, #1252]	; 0x4e4
 800063e:	f887 348c 	strb.w	r3, [r7, #1164]	; 0x48c

					// reduce brightness
					pixel[0].color.r >>= 2;
 8000642:	f897 348d 	ldrb.w	r3, [r7, #1165]	; 0x48d
 8000646:	089b      	lsrs	r3, r3, #2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
					pixel[0].color.g >>= 2;
 800064e:	f897 348e 	ldrb.w	r3, [r7, #1166]	; 0x48e
 8000652:	089b      	lsrs	r3, r3, #2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	f887 348e 	strb.w	r3, [r7, #1166]	; 0x48e
					pixel[0].color.b >>= 2;
 800065a:	f897 348c 	ldrb.w	r3, [r7, #1164]	; 0x48c
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f887 348c 	strb.w	r3, [r7, #1164]	; 0x48c
				}

				// set timer value for next iteration
				timer_val = __HAL_TIM_GET_COUNTER(htim9);
 8000666:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	f8a7 34c8 	strh.w	r3, [r7, #1224]	; 0x4c8
 8000672:	e026      	b.n	80006c2 <blink_or_not+0x162>
		}

		// if solid color mode
		else {
			// set color
			pixel[0].color.g = g2;
 8000674:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000678:	f2a3 43ca 	subw	r3, r3, #1226	; 0x4ca
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f887 348e 	strb.w	r3, [r7, #1166]	; 0x48e
			pixel[0].color.r = r2;
 8000682:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000686:	f2a3 43c9 	subw	r3, r3, #1225	; 0x4c9
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
			pixel[0].color.b = b2;
 8000690:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000694:	f2a3 43cb 	subw	r3, r3, #1227	; 0x4cb
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f887 348c 	strb.w	r3, [r7, #1164]	; 0x48c

			// reduce brightness
			pixel[0].color.r >>= 2;
 800069e:	f897 348d 	ldrb.w	r3, [r7, #1165]	; 0x48d
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f887 348d 	strb.w	r3, [r7, #1165]	; 0x48d
			pixel[0].color.g >>= 2;
 80006aa:	f897 348e 	ldrb.w	r3, [r7, #1166]	; 0x48e
 80006ae:	089b      	lsrs	r3, r3, #2
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	f887 348e 	strb.w	r3, [r7, #1166]	; 0x48e
			pixel[0].color.b >>= 2;
 80006b6:	f897 348c 	ldrb.w	r3, [r7, #1164]	; 0x48c
 80006ba:	089b      	lsrs	r3, r3, #2
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f887 348c 	strb.w	r3, [r7, #1164]	; 0x48c

		// Sending the color to the neopixel:

		// sets a small buffer between setting colors (same timer process as before)
		// if there isn't a buffer it doesn't work for some reason
		if (__HAL_TIM_GET_COUNTER(htim9) - timer_val2 >= 256) {
 80006c2:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ca:	f8b7 34ca 	ldrh.w	r3, [r7, #1226]	; 0x4ca
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	2bff      	cmp	r3, #255	; 0xff
 80006d2:	d983      	bls.n	80005dc <blink_or_not+0x7c>

			// copies pixel data to all pixels
			for (int i = 0; i < (NUM_PIXELS - 1); i++) {
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 80006da:	e015      	b.n	8000708 <blink_or_not+0x1a8>
				pixel[i+1].data = pixel[i].data;
 80006dc:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80006e0:	1c59      	adds	r1, r3, #1
 80006e2:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80006ec:	443b      	add	r3, r7
 80006ee:	f853 2c44 	ldr.w	r2, [r3, #-68]
 80006f2:	008b      	lsls	r3, r1, #2
 80006f4:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 80006f8:	443b      	add	r3, r7
 80006fa:	f843 2c44 	str.w	r2, [r3, #-68]
			for (int i = 0; i < (NUM_PIXELS - 1); i++) {
 80006fe:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8000702:	3301      	adds	r3, #1
 8000704:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8000708:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 800070c:	2b0a      	cmp	r3, #10
 800070e:	dde5      	ble.n	80006dc <blink_or_not+0x17c>
			}

			// pixel buffer for every bit we need to send to neopixel (numpixels * 24)
			pBuff = dmaBuffer;
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc

			// for each pixel, create the bits we need to send from pixel data
			for (int i = 0; i < NUM_PIXELS; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 800071e:	e02f      	b.n	8000780 <blink_or_not+0x220>
			   for (int j = 23; j >= 0; j--) {
 8000720:	2317      	movs	r3, #23
 8000722:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8000726:	e022      	b.n	800076e <blink_or_not+0x20e>
				 if ((pixel[i].data >> j) & 0x01) {
 8000728:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	f503 639a 	add.w	r3, r3, #1232	; 0x4d0
 8000732:	443b      	add	r3, r7
 8000734:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8000738:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 800073c:	fa22 f303 	lsr.w	r3, r2, r3
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d004      	beq.n	8000752 <blink_or_not+0x1f2>
				   *pBuff = NEOPIXEL_ONE;
 8000748:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800074c:	2244      	movs	r2, #68	; 0x44
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	e003      	b.n	800075a <blink_or_not+0x1fa>
				 }
				 else {
				   *pBuff = NEOPIXEL_ZERO;
 8000752:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8000756:	2222      	movs	r2, #34	; 0x22
 8000758:	601a      	str	r2, [r3, #0]
				 }
				 pBuff++;
 800075a:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800075e:	3304      	adds	r3, #4
 8000760:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
			   for (int j = 23; j >= 0; j--) {
 8000764:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000768:	3b01      	subs	r3, #1
 800076a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800076e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000772:	2b00      	cmp	r3, #0
 8000774:	dad8      	bge.n	8000728 <blink_or_not+0x1c8>
			for (int i = 0; i < NUM_PIXELS; i++) {
 8000776:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 800077a:	3301      	adds	r3, #1
 800077c:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8000780:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8000784:	2b0b      	cmp	r3, #11
 8000786:	ddcb      	ble.n	8000720 <blink_or_not+0x1c0>
			   }
			}
			dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 8000788:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800078c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8000790:	2200      	movs	r2, #0
 8000792:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

			// Starts the TIM PWM signal generation in DMA mode (from spec)
			HAL_TIM_PWM_Start_DMA(htim2, TIM_CHANNEL_3, dmaBuffer, DMA_BUFF_SIZE);
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	f240 1321 	movw	r3, #289	; 0x121
 800079e:	2108      	movs	r1, #8
 80007a0:	f8d7 04e8 	ldr.w	r0, [r7, #1256]	; 0x4e8
 80007a4:	f002 feec 	bl	8003580 <HAL_TIM_PWM_Start_DMA>

			// updates timer value for next iteration
			timer_val2 = __HAL_TIM_GET_COUNTER(htim9);
 80007a8:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b0:	f8a7 34ca 	strh.w	r3, [r7, #1226]	; 0x4ca
		if (is_blinking){
 80007b4:	e712      	b.n	80005dc <blink_or_not+0x7c>
 80007b6:	bf00      	nop
 80007b8:	20000028 	.word	0x20000028

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fc71 	bl	80010a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f823 	bl	8000810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 f9b3 	bl	8000b34 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 f991 	bl	8000af4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007d2:	f000 f937 	bl	8000a44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007d6:	f000 f95f 	bl	8000a98 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80007da:	f000 f885 	bl	80008e8 <MX_TIM2_Init>
  MX_TIM9_Init();
 80007de:	f000 f8f7 	bl	80009d0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start(&htim9);
 80007e2:	4809      	ldr	r0, [pc, #36]	; (8000808 <main+0x4c>)
 80007e4:	f002 fe0a 	bl	80033fc <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	blink_or_not(0,39,76,0,5,5,&htim2,&htim9);
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <main+0x4c>)
 80007ea:	9303      	str	r3, [sp, #12]
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <main+0x50>)
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2305      	movs	r3, #5
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	2305      	movs	r3, #5
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2300      	movs	r3, #0
 80007fa:	224c      	movs	r2, #76	; 0x4c
 80007fc:	2127      	movs	r1, #39	; 0x27
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff feae 	bl	8000560 <blink_or_not>
 8000804:	e7f0      	b.n	80007e8 <main+0x2c>
 8000806:	bf00      	nop
 8000808:	20000074 	.word	0x20000074
 800080c:	2000002c 	.word	0x2000002c

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2234      	movs	r2, #52	; 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f004 fd24 	bl	800526c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <SystemClock_Config+0xd0>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <SystemClock_Config+0xd0>)
 800083e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <SystemClock_Config+0xd0>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <SystemClock_Config+0xd4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <SystemClock_Config+0xd4>)
 800085a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <SystemClock_Config+0xd4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000874:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000880:	2304      	movs	r3, #4
 8000882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000884:	23a8      	movs	r3, #168	; 0xa8
 8000886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000890:	2302      	movs	r3, #2
 8000892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fac1 	bl	8002e20 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a4:	f000 f9fc 	bl	8000ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	2105      	movs	r1, #5
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fc36 	bl	8002138 <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d2:	f000 f9e5 	bl	8000ca0 <Error_Handler>
  }
}
 80008d6:	bf00      	nop
 80008d8:	3750      	adds	r7, #80	; 0x50
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000918:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <MX_TIM2_Init+0xe4>)
 800091a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_TIM2_Init+0xe4>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <MX_TIM2_Init+0xe4>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 105;
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MX_TIM2_Init+0xe4>)
 800092e:	2269      	movs	r2, #105	; 0x69
 8000930:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_TIM2_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_TIM2_Init+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093e:	4823      	ldr	r0, [pc, #140]	; (80009cc <MX_TIM2_Init+0xe4>)
 8000940:	f002 fd0c 	bl	800335c <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800094a:	f000 f9a9 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000958:	4619      	mov	r1, r3
 800095a:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_TIM2_Init+0xe4>)
 800095c:	f003 f96c 	bl	8003c38 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000966:	f000 f99b 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800096a:	4818      	ldr	r0, [pc, #96]	; (80009cc <MX_TIM2_Init+0xe4>)
 800096c:	f002 fdae 	bl	80034cc <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000976:	f000 f993 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	4619      	mov	r1, r3
 8000988:	4810      	ldr	r0, [pc, #64]	; (80009cc <MX_TIM2_Init+0xe4>)
 800098a:	f003 fe11 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000994:	f000 f984 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	; 0x60
 800099a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2208      	movs	r2, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM2_Init+0xe4>)
 80009b0:	f003 f880 	bl	8003ab4 <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80009ba:	f000 f971 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009be:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM2_Init+0xe4>)
 80009c0:	f000 fa0a 	bl	8000dd8 <HAL_TIM_MspPostInit>

}
 80009c4:	bf00      	nop
 80009c6:	3738      	adds	r7, #56	; 0x38
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	2000002c 	.word	0x2000002c

080009d0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009e4:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <MX_TIM9_Init+0x70>)
 80009e6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 7999;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009ee:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_TIM9_Init+0x6c>)
 80009f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_TIM9_Init+0x6c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <MX_TIM9_Init+0x6c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM9_Init+0x6c>)
 8000a0c:	f002 fca6 	bl	800335c <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 f943 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_TIM9_Init+0x6c>)
 8000a26:	f003 f907 	bl	8003c38 <HAL_TIM_ConfigClockSource>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000a30:	f000 f936 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000074 	.word	0x20000074
 8000a40:	40014000 	.word	0x40014000

08000a44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_USART3_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART3_UART_Init+0x4c>)
 8000a7c:	f003 fe14 	bl	80046a8 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f000 f90b 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000011c 	.word	0x2000011c
 8000a94:	40004800 	.word	0x40004800

08000a98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */
//
  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000aa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2206      	movs	r2, #6
 8000aa8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	f001 f9e4 	bl	8001ea8 <HAL_PCD_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ae6:	f000 f8db 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
//
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000160 	.word	0x20000160

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_DMA_Init+0x3c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	200c      	movs	r0, #12
 8000b1c:	f000 fc35 	bl	800138a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b20:	200c      	movs	r0, #12
 8000b22:	f000 fc4e 	bl	80013c2 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a4f      	ldr	r2, [pc, #316]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	4b49      	ldr	r3, [pc, #292]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a48      	ldr	r2, [pc, #288]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a3a      	ldr	r2, [pc, #232]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a33      	ldr	r2, [pc, #204]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a2c      	ldr	r2, [pc, #176]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <MX_GPIO_Init+0x15c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bf8:	4826      	ldr	r0, [pc, #152]	; (8000c94 <MX_GPIO_Init+0x160>)
 8000bfa:	f001 f923 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2140      	movs	r1, #64	; 0x40
 8000c02:	4825      	ldr	r0, [pc, #148]	; (8000c98 <MX_GPIO_Init+0x164>)
 8000c04:	f001 f91e 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481f      	ldr	r0, [pc, #124]	; (8000c9c <MX_GPIO_Init+0x168>)
 8000c20:	f000 ff7c 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c24:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4815      	ldr	r0, [pc, #84]	; (8000c94 <MX_GPIO_Init+0x160>)
 8000c3e:	f000 ff6d 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c42:	2340      	movs	r3, #64	; 0x40
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <MX_GPIO_Init+0x164>)
 8000c5a:	f000 ff5f 	bl	8001b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <MX_GPIO_Init+0x164>)
 8000c72:	f000 ff53 	bl	8001b1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2028      	movs	r0, #40	; 0x28
 8000c7c:	f000 fb85 	bl	800138a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f000 fb9e 	bl	80013c2 <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3730      	adds	r7, #48	; 0x30
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40021800 	.word	0x40021800
 8000c9c:	40020800 	.word	0x40020800

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d0c:	d145      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a2c      	ldr	r2, [pc, #176]	; (8000dc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d2c:	4a28      	ldr	r2, [pc, #160]	; (8000dd0 <HAL_TIM_Base_MspInit+0xd4>)
 8000d2e:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d32:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d36:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d3a:	2240      	movs	r2, #64	; 0x40
 8000d3c:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d68:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8000d70:	4816      	ldr	r0, [pc, #88]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d72:	f000 fb41 	bl	80013f8 <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8000d7c:	f7ff ff90 	bl	8000ca0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d84:	621a      	str	r2, [r3, #32]
 8000d86:	4a11      	ldr	r2, [pc, #68]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_TIM_Base_MspInit+0xd0>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000d98:	e012      	b.n	8000dc0 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM9)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <HAL_TIM_Base_MspInit+0xd8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d10d      	bne.n	8000dc0 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db2:	6453      	str	r3, [r2, #68]	; 0x44
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_TIM_Base_MspInit+0xcc>)
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800
 8000dcc:	200000bc 	.word	0x200000bc
 8000dd0:	40026028 	.word	0x40026028
 8000dd4:	40014000 	.word	0x40014000

08000dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df8:	d11e      	bne.n	8000e38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_TIM_MspPostInit+0x68>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_TIM_MspPostInit+0x68>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_TIM_MspPostInit+0x68>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4619      	mov	r1, r3
 8000e32:	4804      	ldr	r0, [pc, #16]	; (8000e44 <HAL_TIM_MspPostInit+0x6c>)
 8000e34:	f000 fe72 	bl	8001b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3720      	adds	r7, #32
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12c      	bne.n	8000ec4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e78:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_UART_MspInit+0x8c>)
 8000ec0:	f000 fe2c 	bl	8001b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40004800 	.word	0x40004800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0a0      	sub	sp, #128	; 0x80
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	225c      	movs	r2, #92	; 0x5c
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 f9b7 	bl	800526c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f06:	d14e      	bne.n	8000fa6 <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fa28 	bl	800236c <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000f22:	f7ff febd 	bl	8000ca0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_PCD_MspInit+0xd8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_PCD_MspInit+0xd8>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_PCD_MspInit+0xd8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f42:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f46:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f54:	230a      	movs	r3, #10
 8000f56:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <HAL_PCD_MspInit+0xdc>)
 8000f60:	f000 fddc 	bl	8001b1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f76:	4619      	mov	r1, r3
 8000f78:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <HAL_PCD_MspInit+0xdc>)
 8000f7a:	f000 fdcf 	bl	8001b1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_PCD_MspInit+0xd8>)
 8000f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_PCD_MspInit+0xd8>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	6353      	str	r3, [r2, #52]	; 0x34
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_PCD_MspInit+0xd8>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_PCD_MspInit+0xd8>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_PCD_MspInit+0xd8>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3780      	adds	r7, #128	; 0x80
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 f8a2 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <DMA1_Stream1_IRQHandler+0x10>)
 8001012:	f000 fb19 	bl	8001648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000bc 	.word	0x200000bc

08001020 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001024:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001028:	f000 ff26 	bl	8001e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001070:	4c0b      	ldr	r4, [pc, #44]	; (80010a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800107e:	f7ff ffd7 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f004 f8cf 	bl	8005224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001086:	f7ff fb99 	bl	80007bc <main>
  bx  lr    
 800108a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001098:	080052c4 	.word	0x080052c4
  ldr r2, =_sbss
 800109c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a0:	20000670 	.word	0x20000670

080010a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f94f 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fde6 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f967 	bl	80013de <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f92f 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	20000008 	.word	0x20000008
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000008 	.word	0x20000008
 8001170:	2000066c 	.word	0x2000066c

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000066c 	.word	0x2000066c

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001194:	f7ff ffee 	bl	8001174 <HAL_GetTick>
 8001198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a4:	d005      	beq.n	80011b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_Delay+0x44>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b2:	bf00      	nop
 80011b4:	f7ff ffde 	bl	8001174 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d8f7      	bhi.n	80011b4 <HAL_Delay+0x28>
  {
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff3e 	bl	800121c <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff31 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ffa2 	bl	8001330 <SysTick_Config>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff feb6 	bl	8001174 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e099      	b.n	8001548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001434:	e00f      	b.n	8001456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001436:	f7ff fe9d 	bl	8001174 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b05      	cmp	r3, #5
 8001442:	d908      	bls.n	8001456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e078      	b.n	8001548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e8      	bne.n	8001436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_DMA_Init+0x158>)
 8001470:	4013      	ands	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800148e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	d107      	bne.n	80014c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4313      	orrs	r3, r2
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4313      	orrs	r3, r2
 80014be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f023 0307 	bic.w	r3, r3, #7
 80014d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4313      	orrs	r3, r2
 80014e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d117      	bne.n	800151a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00e      	beq.n	800151a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fa91 	bl	8001a24 <DMA_CheckFifoParam>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001516:	2301      	movs	r3, #1
 8001518:	e016      	b.n	8001548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 fa48 	bl	80019b8 <DMA_CalcBaseAndBitshift>
 8001528:	4603      	mov	r3, r0
 800152a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	223f      	movs	r2, #63	; 0x3f
 8001532:	409a      	lsls	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	f010803f 	.word	0xf010803f

08001554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_DMA_Start_IT+0x26>
 8001576:	2302      	movs	r3, #2
 8001578:	e040      	b.n	80015fc <HAL_DMA_Start_IT+0xa8>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d12f      	bne.n	80015ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f9da 	bl	800195c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	223f      	movs	r2, #63	; 0x3f
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0216 	orr.w	r2, r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0208 	orr.w	r2, r2, #8
 80015da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e005      	b.n	80015fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015f6:	2302      	movs	r3, #2
 80015f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d004      	beq.n	8001622 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e00c      	b.n	800163c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2205      	movs	r2, #5
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001654:	4b8e      	ldr	r3, [pc, #568]	; (8001890 <HAL_DMA_IRQHandler+0x248>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a8e      	ldr	r2, [pc, #568]	; (8001894 <HAL_DMA_IRQHandler+0x24c>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	0a9b      	lsrs	r3, r3, #10
 8001660:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	2208      	movs	r2, #8
 8001674:	409a      	lsls	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01a      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0204 	bic.w	r2, r2, #4
 800169a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a0:	2208      	movs	r2, #8
 80016a2:	409a      	lsls	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	2201      	movs	r2, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d012      	beq.n	80016ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d6:	2201      	movs	r2, #1
 80016d8:	409a      	lsls	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	f043 0202 	orr.w	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2204      	movs	r2, #4
 80016f0:	409a      	lsls	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d012      	beq.n	8001720 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	2204      	movs	r2, #4
 800170e:	409a      	lsls	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	f043 0204 	orr.w	r2, r3, #4
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	2210      	movs	r2, #16
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d043      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d03c      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	2210      	movs	r2, #16
 8001744:	409a      	lsls	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d018      	beq.n	800178a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d108      	bne.n	8001778 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	2b00      	cmp	r3, #0
 800176c:	d024      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
 8001776:	e01f      	b.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01b      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	4798      	blx	r3
 8001788:	e016      	b.n	80017b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0208 	bic.w	r2, r2, #8
 80017a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017bc:	2220      	movs	r2, #32
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 808f 	beq.w	80018e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8087 	beq.w	80018e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2220      	movs	r2, #32
 80017e0:	409a      	lsls	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d136      	bne.n	8001860 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0216 	bic.w	r2, r2, #22
 8001800:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001810:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <HAL_DMA_IRQHandler+0x1da>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0208 	bic.w	r2, r2, #8
 8001830:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	223f      	movs	r2, #63	; 0x3f
 8001838:	409a      	lsls	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001852:	2b00      	cmp	r3, #0
 8001854:	d07e      	beq.n	8001954 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
        }
        return;
 800185e:	e079      	b.n	8001954 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01d      	beq.n	80018aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	2b00      	cmp	r3, #0
 8001882:	d031      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
 800188c:	e02c      	b.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189c:	2b00      	cmp	r3, #0
 800189e:	d023      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
 80018a8:	e01e      	b.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10f      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0210 	bic.w	r2, r2, #16
 80018c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d032      	beq.n	8001956 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d022      	beq.n	8001942 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2205      	movs	r2, #5
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	3301      	adds	r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	429a      	cmp	r2, r3
 800191e:	d307      	bcc.n	8001930 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f2      	bne.n	8001914 <HAL_DMA_IRQHandler+0x2cc>
 800192e:	e000      	b.n	8001932 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001930:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	4798      	blx	r3
 8001952:	e000      	b.n	8001956 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001954:	bf00      	nop
    }
  }
}
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001978:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b40      	cmp	r3, #64	; 0x40
 8001988:	d108      	bne.n	800199c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800199a:	e007      	b.n	80019ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68ba      	ldr	r2, [r7, #8]
 80019a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	3b10      	subs	r3, #16
 80019c8:	4a14      	ldr	r2, [pc, #80]	; (8001a1c <DMA_CalcBaseAndBitshift+0x64>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019d2:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <DMA_CalcBaseAndBitshift+0x68>)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d909      	bls.n	80019fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	1d1a      	adds	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	; 0x58
 80019f8:	e007      	b.n	8001a0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a02:	f023 0303 	bic.w	r3, r3, #3
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	aaaaaaab 	.word	0xaaaaaaab
 8001a20:	080052ac 	.word	0x080052ac

08001a24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d11f      	bne.n	8001a7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d856      	bhi.n	8001af2 <DMA_CheckFifoParam+0xce>
 8001a44:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <DMA_CheckFifoParam+0x28>)
 8001a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4a:	bf00      	nop
 8001a4c:	08001a5d 	.word	0x08001a5d
 8001a50:	08001a6f 	.word	0x08001a6f
 8001a54:	08001a5d 	.word	0x08001a5d
 8001a58:	08001af3 	.word	0x08001af3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d046      	beq.n	8001af6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a6c:	e043      	b.n	8001af6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a76:	d140      	bne.n	8001afa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a7c:	e03d      	b.n	8001afa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a86:	d121      	bne.n	8001acc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d837      	bhi.n	8001afe <DMA_CheckFifoParam+0xda>
 8001a8e:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <DMA_CheckFifoParam+0x70>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001aab 	.word	0x08001aab
 8001a9c:	08001aa5 	.word	0x08001aa5
 8001aa0:	08001abd 	.word	0x08001abd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa8:	e030      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d025      	beq.n	8001b02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aba:	e022      	b.n	8001b02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ac4:	d11f      	bne.n	8001b06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aca:	e01c      	b.n	8001b06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d903      	bls.n	8001ada <DMA_CheckFifoParam+0xb6>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d003      	beq.n	8001ae0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ad8:	e018      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ade:	e015      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00e      	beq.n	8001b0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
      break;
 8001af0:	e00b      	b.n	8001b0a <DMA_CheckFifoParam+0xe6>
      break;
 8001af2:	bf00      	nop
 8001af4:	e00a      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
      break;
 8001af6:	bf00      	nop
 8001af8:	e008      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
      break;
 8001afa:	bf00      	nop
 8001afc:	e006      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
      break;
 8001afe:	bf00      	nop
 8001b00:	e004      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
      break;
 8001b02:	bf00      	nop
 8001b04:	e002      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
      break;   
 8001b06:	bf00      	nop
 8001b08:	e000      	b.n	8001b0c <DMA_CheckFifoParam+0xe8>
      break;
 8001b0a:	bf00      	nop
    }
  } 
  
  return status; 
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e165      	b.n	8001e04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	f040 8154 	bne.w	8001dfe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d005      	beq.n	8001b6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d017      	beq.n	8001c0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d123      	bne.n	8001c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	220f      	movs	r2, #15
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	69b9      	ldr	r1, [r7, #24]
 8001c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0203 	and.w	r2, r3, #3
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80ae 	beq.w	8001dfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b5d      	ldr	r3, [pc, #372]	; (8001e1c <HAL_GPIO_Init+0x300>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a5c      	ldr	r2, [pc, #368]	; (8001e1c <HAL_GPIO_Init+0x300>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <HAL_GPIO_Init+0x300>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cbe:	4a58      	ldr	r2, [pc, #352]	; (8001e20 <HAL_GPIO_Init+0x304>)
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4f      	ldr	r2, [pc, #316]	; (8001e24 <HAL_GPIO_Init+0x308>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d025      	beq.n	8001d36 <HAL_GPIO_Init+0x21a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4e      	ldr	r2, [pc, #312]	; (8001e28 <HAL_GPIO_Init+0x30c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <HAL_GPIO_Init+0x216>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4d      	ldr	r2, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x310>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x212>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <HAL_GPIO_Init+0x314>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x20e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <HAL_GPIO_Init+0x318>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x20a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4a      	ldr	r2, [pc, #296]	; (8001e38 <HAL_GPIO_Init+0x31c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x206>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a49      	ldr	r2, [pc, #292]	; (8001e3c <HAL_GPIO_Init+0x320>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x202>
 8001d1a:	2306      	movs	r3, #6
 8001d1c:	e00c      	b.n	8001d38 <HAL_GPIO_Init+0x21c>
 8001d1e:	2307      	movs	r3, #7
 8001d20:	e00a      	b.n	8001d38 <HAL_GPIO_Init+0x21c>
 8001d22:	2305      	movs	r3, #5
 8001d24:	e008      	b.n	8001d38 <HAL_GPIO_Init+0x21c>
 8001d26:	2304      	movs	r3, #4
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x21c>
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e004      	b.n	8001d38 <HAL_GPIO_Init+0x21c>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e002      	b.n	8001d38 <HAL_GPIO_Init+0x21c>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_GPIO_Init+0x21c>
 8001d36:	2300      	movs	r3, #0
 8001d38:	69fa      	ldr	r2, [r7, #28]
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	0092      	lsls	r2, r2, #2
 8001d40:	4093      	lsls	r3, r2
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d48:	4935      	ldr	r1, [pc, #212]	; (8001e20 <HAL_GPIO_Init+0x304>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	089b      	lsrs	r3, r3, #2
 8001d4e:	3302      	adds	r3, #2
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d56:	4b3a      	ldr	r3, [pc, #232]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d7a:	4a31      	ldr	r2, [pc, #196]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001daa:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dce:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_GPIO_Init+0x324>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3301      	adds	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2b0f      	cmp	r3, #15
 8001e08:	f67f ae96 	bls.w	8001b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40013800 	.word	0x40013800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40020400 	.word	0x40020400
 8001e2c:	40020800 	.word	0x40020800
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40021400 	.word	0x40021400
 8001e3c:	40021800 	.word	0x40021800
 8001e40:	40013c00 	.word	0x40013c00

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e90:	88fb      	ldrh	r3, [r7, #6]
 8001e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb42 	bl	8000520 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40013c00 	.word	0x40013c00

08001ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eaa:	b08f      	sub	sp, #60	; 0x3c
 8001eac:	af0a      	add	r7, sp, #40	; 0x28
 8001eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e116      	b.n	80020e8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d106      	bne.n	8001eda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7fe ffff 	bl	8000ed8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2203      	movs	r2, #3
 8001ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 fef8 	bl	8004cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	687e      	ldr	r6, [r7, #4]
 8001f06:	466d      	mov	r5, sp
 8001f08:	f106 0410 	add.w	r4, r6, #16
 8001f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f1c:	1d33      	adds	r3, r6, #4
 8001f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f20:	6838      	ldr	r0, [r7, #0]
 8001f22:	f002 fe83 	bl	8004c2c <USB_CoreInit>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d7      	b.n	80020e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fee6 	bl	8004d10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	e04a      	b.n	8001fe0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	333d      	adds	r3, #61	; 0x3d
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	333c      	adds	r3, #60	; 0x3c
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	b298      	uxth	r0, r3
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3344      	adds	r3, #68	; 0x44
 8001f86:	4602      	mov	r2, r0
 8001f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	3340      	adds	r3, #64	; 0x40
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f9e:	7bfa      	ldrb	r2, [r7, #15]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	440b      	add	r3, r1
 8001fac:	3348      	adds	r3, #72	; 0x48
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	334c      	adds	r3, #76	; 0x4c
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3354      	adds	r3, #84	; 0x54
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3af      	bcc.n	8001f4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	e044      	b.n	800207a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	3301      	adds	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	d3b5      	bcc.n	8001ff0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	687e      	ldr	r6, [r7, #4]
 800208c:	466d      	mov	r5, sp
 800208e:	f106 0410 	add.w	r4, r6, #16
 8002092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800209e:	e885 0003 	stmia.w	r5, {r0, r1}
 80020a2:	1d33      	adds	r3, r6, #4
 80020a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a6:	6838      	ldr	r0, [r7, #0]
 80020a8:	f002 fe7e 	bl	8004da8 <USB_DevInit>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e014      	b.n	80020e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d102      	bne.n	80020dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f80a 	bl	80020f0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 f83c 	bl	800515e <USB_DevDisconnect>

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	f043 0303 	orr.w	r3, r3, #3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0cc      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800214c:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 030f 	and.w	r3, r3, #15
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d90c      	bls.n	8002174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0b8      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d020      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800218c:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4a58      	ldr	r2, [pc, #352]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a4:	4b53      	ldr	r3, [pc, #332]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d044      	beq.n	8002258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d119      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e07f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d107      	bne.n	8002206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e06f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002206:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e067      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4934      	ldr	r1, [pc, #208]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7fe ffa4 	bl	8001174 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7fe ffa0 	bl	8001174 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e04f      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d20c      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e032      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4916      	ldr	r1, [pc, #88]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022be:	f000 fb7f 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490a      	ldr	r1, [pc, #40]	; (80022f8 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe ff04 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023c00 	.word	0x40023c00
 80022f4:	40023800 	.word	0x40023800
 80022f8:	08005294 	.word	0x08005294
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCC_GetHCLKFreq+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000000 	.word	0x20000000

0800231c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002320:	f7ff fff0 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0a9b      	lsrs	r3, r3, #10
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4903      	ldr	r1, [pc, #12]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	080052a4 	.word	0x080052a4

08002344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002348:	f7ff ffdc 	bl	8002304 <HAL_RCC_GetHCLKFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	0b5b      	lsrs	r3, r3, #13
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	4903      	ldr	r1, [pc, #12]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002360:	4618      	mov	r0, r3
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40023800 	.word	0x40023800
 8002368:	080052a4 	.word	0x080052a4

0800236c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	; 0x30
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d010      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80023a4:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023aa:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	496c      	ldr	r1, [pc, #432]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80023c2:	2301      	movs	r3, #1
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d010      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80023d2:	4b64      	ldr	r3, [pc, #400]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	4960      	ldr	r1, [pc, #384]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d017      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002400:	4b58      	ldr	r3, [pc, #352]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4955      	ldr	r1, [pc, #340]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800241e:	d101      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002420:	2301      	movs	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800242c:	2301      	movs	r3, #1
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d017      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800243c:	4b49      	ldr	r3, [pc, #292]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800243e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244a:	4946      	ldr	r1, [pc, #280]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245a:	d101      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800245c:	2301      	movs	r3, #1
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002468:	2301      	movs	r3, #1
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 808a 	beq.w	800258e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	4b39      	ldr	r3, [pc, #228]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a38      	ldr	r2, [pc, #224]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002496:	4b34      	ldr	r3, [pc, #208]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a33      	ldr	r2, [pc, #204]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024a2:	f7fe fe67 	bl	8001174 <HAL_GetTick>
 80024a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7fe fe63 	bl	8001174 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e278      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024bc:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d02f      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e0:	6a3a      	ldr	r2, [r7, #32]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d028      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ee:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024f6:	4b1d      	ldr	r3, [pc, #116]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80024fc:	4a19      	ldr	r2, [pc, #100]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d114      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fe31 	bl	8001174 <HAL_GetTick>
 8002512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	e00a      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002516:	f7fe fe2d 	bl	8001174 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	f241 3288 	movw	r2, #5000	; 0x1388
 8002524:	4293      	cmp	r3, r2
 8002526:	d901      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e240      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0ee      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002544:	d114      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	4902      	ldr	r1, [pc, #8]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
 8002560:	e00c      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40007000 	.word	0x40007000
 800256c:	42470e40 	.word	0x42470e40
 8002570:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a49      	ldr	r2, [pc, #292]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002576:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800257a:	6093      	str	r3, [r2, #8]
 800257c:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800257e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	4944      	ldr	r1, [pc, #272]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800258a:	4313      	orrs	r3, r2
 800258c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80025a0:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80025a2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	4937      	ldr	r1, [pc, #220]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e0:	492e      	ldr	r1, [pc, #184]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d011      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	4926      	ldr	r1, [pc, #152]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002612:	d101      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002614:	2301      	movs	r3, #1
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	491a      	ldr	r1, [pc, #104]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	2b00      	cmp	r3, #0
 8002644:	d011      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002648:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002654:	4911      	ldr	r1, [pc, #68]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002664:	d101      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002666:	2301      	movs	r3, #1
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d005      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002678:	f040 80ff 	bne.w	800287a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002682:	f7fe fd77 	bl	8001174 <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002688:	e00e      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800268a:	f7fe fd73 	bl	8001174 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d907      	bls.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e188      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 800269c:	40023800 	.word	0x40023800
 80026a0:	424711e0 	.word	0x424711e0
 80026a4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026a8:	4b7e      	ldr	r3, [pc, #504]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ea      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d009      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d028      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d124      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026dc:	4b71      	ldr	r3, [pc, #452]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e2:	0c1b      	lsrs	r3, r3, #16
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	3301      	adds	r3, #1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026ee:	4b6d      	ldr	r3, [pc, #436]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f4:	0e1b      	lsrs	r3, r3, #24
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	019b      	lsls	r3, r3, #6
 8002706:	431a      	orrs	r2, r3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	431a      	orrs	r2, r3
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	071b      	lsls	r3, r3, #28
 800271e:	4961      	ldr	r1, [pc, #388]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002744:	2b00      	cmp	r3, #0
 8002746:	d035      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002750:	d130      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002752:	4b54      	ldr	r3, [pc, #336]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	3301      	adds	r3, #1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800276a:	0f1b      	lsrs	r3, r3, #28
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	019b      	lsls	r3, r3, #6
 800277c:	431a      	orrs	r2, r3
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	3b01      	subs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	431a      	orrs	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	071b      	lsls	r3, r3, #28
 8002794:	4943      	ldr	r1, [pc, #268]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800279c:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800279e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a2:	f023 021f 	bic.w	r2, r3, #31
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	493d      	ldr	r1, [pc, #244]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d029      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c8:	d124      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027ca:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027dc:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e2:	0f1b      	lsrs	r3, r3, #28
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	019b      	lsls	r3, r3, #6
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	3b01      	subs	r3, #1
 80027fe:	041b      	lsls	r3, r3, #16
 8002800:	431a      	orrs	r2, r3
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	431a      	orrs	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	071b      	lsls	r3, r3, #28
 800280c:	4925      	ldr	r1, [pc, #148]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281c:	2b00      	cmp	r3, #0
 800281e:	d016      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	019b      	lsls	r3, r3, #6
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	3b01      	subs	r3, #1
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	071b      	lsls	r3, r3, #28
 8002846:	4917      	ldr	r1, [pc, #92]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002854:	f7fe fc8e 	bl	8001174 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800285c:	f7fe fc8a 	bl	8001174 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e09f      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800286e:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	2b01      	cmp	r3, #1
 800287e:	f040 8095 	bne.w	80029ac <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002888:	f7fe fc74 	bl	8001174 <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800288e:	e00f      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002890:	f7fe fc70 	bl	8001174 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d908      	bls.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e085      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x642>
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	42470068 	.word	0x42470068
 80028ac:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028b0:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028bc:	d0e8      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d009      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d02b      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d127      	bne.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80028e6:	4b34      	ldr	r3, [pc, #208]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	3301      	adds	r3, #1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	019b      	lsls	r3, r3, #6
 8002902:	431a      	orrs	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	085b      	lsrs	r3, r3, #1
 8002908:	3b01      	subs	r3, #1
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	061b      	lsls	r3, r3, #24
 8002914:	4928      	ldr	r1, [pc, #160]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800291c:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800291e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002922:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	3b01      	subs	r3, #1
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01d      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294a:	d118      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	0e1b      	lsrs	r3, r3, #24
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	019b      	lsls	r3, r3, #6
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	4910      	ldr	r1, [pc, #64]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002984:	f7fe fbf6 	bl	8001174 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800298c:	f7fe fbf2 	bl	8001174 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e007      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029aa:	d1ef      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3730      	adds	r7, #48	; 0x30
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023800 	.word	0x40023800
 80029bc:	42470070 	.word	0x42470070

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b0ae      	sub	sp, #184	; 0xb8
 80029c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e6:	4bcb      	ldr	r3, [pc, #812]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	f200 8206 	bhi.w	8002e00 <HAL_RCC_GetSysClockFreq+0x440>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a31 	.word	0x08002a31
 8002a00:	08002e01 	.word	0x08002e01
 8002a04:	08002e01 	.word	0x08002e01
 8002a08:	08002e01 	.word	0x08002e01
 8002a0c:	08002a39 	.word	0x08002a39
 8002a10:	08002e01 	.word	0x08002e01
 8002a14:	08002e01 	.word	0x08002e01
 8002a18:	08002e01 	.word	0x08002e01
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002e01 	.word	0x08002e01
 8002a24:	08002e01 	.word	0x08002e01
 8002a28:	08002e01 	.word	0x08002e01
 8002a2c:	08002c31 	.word	0x08002c31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4bb9      	ldr	r3, [pc, #740]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002a36:	e1e7      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a38:	4bb8      	ldr	r3, [pc, #736]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a3e:	e1e3      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a40:	4bb4      	ldr	r3, [pc, #720]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a4c:	4bb1      	ldr	r3, [pc, #708]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d071      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a58:	4bae      	ldr	r3, [pc, #696]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a64:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a74:	2300      	movs	r3, #0
 8002a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a7e:	4622      	mov	r2, r4
 8002a80:	462b      	mov	r3, r5
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	0159      	lsls	r1, r3, #5
 8002a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a90:	0150      	lsls	r0, r2, #5
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4621      	mov	r1, r4
 8002a98:	1a51      	subs	r1, r2, r1
 8002a9a:	6439      	str	r1, [r7, #64]	; 0x40
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	018b      	lsls	r3, r1, #6
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aba:	4641      	mov	r1, r8
 8002abc:	018a      	lsls	r2, r1, #6
 8002abe:	4641      	mov	r1, r8
 8002ac0:	1a51      	subs	r1, r2, r1
 8002ac2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ac4:	4649      	mov	r1, r9
 8002ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ad8:	4649      	mov	r1, r9
 8002ada:	00cb      	lsls	r3, r1, #3
 8002adc:	4641      	mov	r1, r8
 8002ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	00ca      	lsls	r2, r1, #3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	4622      	mov	r2, r4
 8002aee:	189b      	adds	r3, r3, r2
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
 8002af2:	462b      	mov	r3, r5
 8002af4:	460a      	mov	r2, r1
 8002af6:	eb42 0303 	adc.w	r3, r2, r3
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b08:	4629      	mov	r1, r5
 8002b0a:	024b      	lsls	r3, r1, #9
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b12:	4621      	mov	r1, r4
 8002b14:	024a      	lsls	r2, r1, #9
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b2c:	f7fd fb6a 	bl	8000204 <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4613      	mov	r3, r2
 8002b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b3a:	e067      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3c:	4b75      	ldr	r3, [pc, #468]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b48:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b56:	2300      	movs	r3, #0
 8002b58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b5e:	4622      	mov	r2, r4
 8002b60:	462b      	mov	r3, r5
 8002b62:	f04f 0000 	mov.w	r0, #0
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	0159      	lsls	r1, r3, #5
 8002b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b70:	0150      	lsls	r0, r2, #5
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4621      	mov	r1, r4
 8002b78:	1a51      	subs	r1, r2, r1
 8002b7a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b90:	4649      	mov	r1, r9
 8002b92:	018b      	lsls	r3, r1, #6
 8002b94:	4641      	mov	r1, r8
 8002b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	018a      	lsls	r2, r1, #6
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bbe:	4692      	mov	sl, r2
 8002bc0:	469b      	mov	fp, r3
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	eb1a 0303 	adds.w	r3, sl, r3
 8002bc8:	623b      	str	r3, [r7, #32]
 8002bca:	462b      	mov	r3, r5
 8002bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bde:	4629      	mov	r1, r5
 8002be0:	028b      	lsls	r3, r1, #10
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be8:	4621      	mov	r1, r4
 8002bea:	028a      	lsls	r2, r1, #10
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8002bf8:	677a      	str	r2, [r7, #116]	; 0x74
 8002bfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bfe:	f7fd fb01 	bl	8000204 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4613      	mov	r3, r2
 8002c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c0c:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	3301      	adds	r3, #1
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c2e:	e0eb      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d06b      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	2200      	movs	r2, #0
 8002c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002c60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c64:	4622      	mov	r2, r4
 8002c66:	462b      	mov	r3, r5
 8002c68:	f04f 0000 	mov.w	r0, #0
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	0159      	lsls	r1, r3, #5
 8002c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c76:	0150      	lsls	r0, r2, #5
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	1a51      	subs	r1, r2, r1
 8002c80:	61b9      	str	r1, [r7, #24]
 8002c82:	4629      	mov	r1, r5
 8002c84:	eb63 0301 	sbc.w	r3, r3, r1
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c96:	4659      	mov	r1, fp
 8002c98:	018b      	lsls	r3, r1, #6
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca0:	4651      	mov	r1, sl
 8002ca2:	018a      	lsls	r2, r1, #6
 8002ca4:	4651      	mov	r1, sl
 8002ca6:	ebb2 0801 	subs.w	r8, r2, r1
 8002caa:	4659      	mov	r1, fp
 8002cac:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cc4:	4690      	mov	r8, r2
 8002cc6:	4699      	mov	r9, r3
 8002cc8:	4623      	mov	r3, r4
 8002cca:	eb18 0303 	adds.w	r3, r8, r3
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	eb49 0303 	adc.w	r3, r9, r3
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	024b      	lsls	r3, r1, #9
 8002ce8:	4621      	mov	r1, r4
 8002cea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cee:	4621      	mov	r1, r4
 8002cf0:	024a      	lsls	r2, r1, #9
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cfe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d04:	f7fd fa7e 	bl	8000204 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d12:	e065      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x420>
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400
 8002d1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d20:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	099b      	lsrs	r3, r3, #6
 8002d26:	2200      	movs	r2, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d30:	653b      	str	r3, [r7, #80]	; 0x50
 8002d32:	2300      	movs	r3, #0
 8002d34:	657b      	str	r3, [r7, #84]	; 0x54
 8002d36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002d3a:	4642      	mov	r2, r8
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0159      	lsls	r1, r3, #5
 8002d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d4c:	0150      	lsls	r0, r2, #5
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4641      	mov	r1, r8
 8002d54:	1a51      	subs	r1, r2, r1
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	4649      	mov	r1, r9
 8002d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d76:	4651      	mov	r1, sl
 8002d78:	018a      	lsls	r2, r1, #6
 8002d7a:	4651      	mov	r1, sl
 8002d7c:	1a54      	subs	r4, r2, r1
 8002d7e:	4659      	mov	r1, fp
 8002d80:	eb63 0501 	sbc.w	r5, r3, r1
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	00eb      	lsls	r3, r5, #3
 8002d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d92:	00e2      	lsls	r2, r4, #3
 8002d94:	4614      	mov	r4, r2
 8002d96:	461d      	mov	r5, r3
 8002d98:	4643      	mov	r3, r8
 8002d9a:	18e3      	adds	r3, r4, r3
 8002d9c:	603b      	str	r3, [r7, #0]
 8002d9e:	464b      	mov	r3, r9
 8002da0:	eb45 0303 	adc.w	r3, r5, r3
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002db2:	4629      	mov	r1, r5
 8002db4:	028b      	lsls	r3, r1, #10
 8002db6:	4621      	mov	r1, r4
 8002db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	028a      	lsls	r2, r1, #10
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dc8:	2200      	movs	r2, #0
 8002dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dcc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002dce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dd2:	f7fd fa17 	bl	8000204 <__aeabi_uldivmod>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4613      	mov	r3, r2
 8002ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x458>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	0f1b      	lsrs	r3, r3, #28
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dfe:	e003      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	37b8      	adds	r7, #184	; 0xb8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400

08002e20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e28d      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8083 	beq.w	8002f46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e40:	4b94      	ldr	r3, [pc, #592]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d019      	beq.n	8002e80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e4c:	4b91      	ldr	r3, [pc, #580]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d106      	bne.n	8002e66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e58:	4b8e      	ldr	r3, [pc, #568]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e66:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e6e:	2b0c      	cmp	r3, #12
 8002e70:	d112      	bne.n	8002e98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e72:	4b88      	ldr	r3, [pc, #544]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7e:	d10b      	bne.n	8002e98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4b84      	ldr	r3, [pc, #528]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d05b      	beq.n	8002f44 <HAL_RCC_OscConfig+0x124>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d157      	bne.n	8002f44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e25a      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d106      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x90>
 8002ea2:	4b7c      	ldr	r3, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a7b      	ldr	r2, [pc, #492]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e01d      	b.n	8002eec <HAL_RCC_OscConfig+0xcc>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xb4>
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a75      	ldr	r2, [pc, #468]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b73      	ldr	r3, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a72      	ldr	r2, [pc, #456]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0xcc>
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a6e      	ldr	r2, [pc, #440]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a6b      	ldr	r2, [pc, #428]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f93e 	bl	8001174 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe f93a 	bl	8001174 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e21f      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xdc>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f92a 	bl	8001174 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f24:	f7fe f926 	bl	8001174 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e20b      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	4b57      	ldr	r3, [pc, #348]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x104>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d06f      	beq.n	8003032 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f52:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d017      	beq.n	8002f8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f5e:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d105      	bne.n	8002f76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00b      	beq.n	8002f8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f7e:	2b0c      	cmp	r3, #12
 8002f80:	d11c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d116      	bne.n	8002fbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8e:	4b41      	ldr	r3, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x186>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e1d3      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4937      	ldr	r1, [pc, #220]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	e03a      	b.n	8003032 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc4:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_RCC_OscConfig+0x278>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fca:	f7fe f8d3 	bl	8001174 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd2:	f7fe f8cf 	bl	8001174 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e1b4      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4925      	ldr	r1, [pc, #148]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x278>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300c:	f7fe f8b2 	bl	8001174 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003014:	f7fe f8ae 	bl	8001174 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e193      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f0      	bne.n	8003014 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d036      	beq.n	80030ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d016      	beq.n	8003074 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCC_OscConfig+0x27c>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe f892 	bl	8001174 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003054:	f7fe f88e 	bl	8001174 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e173      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x274>)
 8003068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x234>
 8003072:	e01b      	b.n	80030ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_OscConfig+0x27c>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fe f87b 	bl	8001174 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	e00e      	b.n	80030a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7fe f877 	bl	8001174 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d907      	bls.n	80030a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e15c      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
 8003094:	40023800 	.word	0x40023800
 8003098:	42470000 	.word	0x42470000
 800309c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	4b8a      	ldr	r3, [pc, #552]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80030a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ea      	bne.n	8003082 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8097 	beq.w	80031e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030be:	4b83      	ldr	r3, [pc, #524]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b7f      	ldr	r3, [pc, #508]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a7e      	ldr	r2, [pc, #504]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b7c      	ldr	r3, [pc, #496]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b79      	ldr	r3, [pc, #484]	; (80032d0 <HAL_RCC_OscConfig+0x4b0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d118      	bne.n	8003128 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x4b0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x4b0>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003102:	f7fe f837 	bl	8001174 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310a:	f7fe f833 	bl	8001174 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e118      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x4b0>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d106      	bne.n	800313e <HAL_RCC_OscConfig+0x31e>
 8003130:	4b66      	ldr	r3, [pc, #408]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a65      	ldr	r2, [pc, #404]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	e01c      	b.n	8003178 <HAL_RCC_OscConfig+0x358>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b05      	cmp	r3, #5
 8003144:	d10c      	bne.n	8003160 <HAL_RCC_OscConfig+0x340>
 8003146:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	4a60      	ldr	r2, [pc, #384]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 800314c:	f043 0304 	orr.w	r3, r3, #4
 8003150:	6713      	str	r3, [r2, #112]	; 0x70
 8003152:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	4a5d      	ldr	r2, [pc, #372]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6713      	str	r3, [r2, #112]	; 0x70
 800315e:	e00b      	b.n	8003178 <HAL_RCC_OscConfig+0x358>
 8003160:	4b5a      	ldr	r3, [pc, #360]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a59      	ldr	r2, [pc, #356]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	4b57      	ldr	r3, [pc, #348]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	4a56      	ldr	r2, [pc, #344]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003172:	f023 0304 	bic.w	r3, r3, #4
 8003176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d015      	beq.n	80031ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fd fff8 	bl	8001174 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	e00a      	b.n	800319e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003188:	f7fd fff4 	bl	8001174 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e0d7      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319e:	4b4b      	ldr	r3, [pc, #300]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0ee      	beq.n	8003188 <HAL_RCC_OscConfig+0x368>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fd ffe2 	bl	8001174 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fd ffde 	bl	8001174 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0c1      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	4b40      	ldr	r3, [pc, #256]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ee      	bne.n	80031b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d105      	bne.n	80031e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031dc:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	4a3a      	ldr	r2, [pc, #232]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80031e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80ad 	beq.w	800334c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d060      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d145      	bne.n	8003292 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <HAL_RCC_OscConfig+0x4b4>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fd ffb2 	bl	8001174 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fd ffae 	bl	8001174 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e093      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	3b01      	subs	r3, #1
 800324c:	041b      	lsls	r3, r3, #16
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	071b      	lsls	r3, r3, #28
 800325e:	491b      	ldr	r1, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x4b4>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fd ff83 	bl	8001174 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003272:	f7fd ff7f 	bl	8001174 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e064      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x452>
 8003290:	e05c      	b.n	800334c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_RCC_OscConfig+0x4b4>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fd ff6c 	bl	8001174 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fd ff68 	bl	8001174 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e04d      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x480>
 80032be:	e045      	b.n	800334c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e040      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d8:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <HAL_RCC_OscConfig+0x538>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d030      	beq.n	8003348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d129      	bne.n	8003348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d122      	bne.n	8003348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003308:	4013      	ands	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003310:	4293      	cmp	r3, r2
 8003312:	d119      	bne.n	8003348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	3b01      	subs	r3, #1
 8003322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d10f      	bne.n	8003348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800

0800335c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e041      	b.n	80033f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd fcba 	bl	8000cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f000 fdf8 	bl	8003f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e046      	b.n	80034a2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a23      	ldr	r2, [pc, #140]	; (80034b0 <HAL_TIM_Base_Start+0xb4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d022      	beq.n	800346c <HAL_TIM_Base_Start+0x70>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d01d      	beq.n	800346c <HAL_TIM_Base_Start+0x70>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_TIM_Base_Start+0xb8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d018      	beq.n	800346c <HAL_TIM_Base_Start+0x70>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <HAL_TIM_Base_Start+0xbc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_TIM_Base_Start+0x70>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_TIM_Base_Start+0xc0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00e      	beq.n	800346c <HAL_TIM_Base_Start+0x70>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_TIM_Base_Start+0xc4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_TIM_Base_Start+0x70>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a19      	ldr	r2, [pc, #100]	; (80034c4 <HAL_TIM_Base_Start+0xc8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d004      	beq.n	800346c <HAL_TIM_Base_Start+0x70>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_TIM_Base_Start+0xcc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d111      	bne.n	8003490 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d010      	beq.n	80034a0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348e:	e007      	b.n	80034a0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	40000c00 	.word	0x40000c00
 80034c0:	40010400 	.word	0x40010400
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40001800 	.word	0x40001800

080034cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e041      	b.n	8003562 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f839 	bl	800356a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f000 fd40 	bl	8003f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_TIM_PWM_Start_DMA+0x2c>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	e022      	b.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d109      	bne.n	80035c6 <HAL_TIM_PWM_Start_DMA+0x46>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	bf0c      	ite	eq
 80035be:	2301      	moveq	r3, #1
 80035c0:	2300      	movne	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e015      	b.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d109      	bne.n	80035e0 <HAL_TIM_PWM_Start_DMA+0x60>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e008      	b.n	80035f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
 80035f8:	e171      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_TIM_PWM_Start_DMA+0x94>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	e022      	b.n	800365a <HAL_TIM_PWM_Start_DMA+0xda>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d109      	bne.n	800362e <HAL_TIM_PWM_Start_DMA+0xae>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b01      	cmp	r3, #1
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e015      	b.n	800365a <HAL_TIM_PWM_Start_DMA+0xda>
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d109      	bne.n	8003648 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b01      	cmp	r3, #1
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e008      	b.n	800365a <HAL_TIM_PWM_Start_DMA+0xda>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d024      	beq.n	80036a8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d104      	bne.n	800366e <HAL_TIM_PWM_Start_DMA+0xee>
 8003664:	887b      	ldrh	r3, [r7, #2]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e137      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d104      	bne.n	800367e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800367c:	e016      	b.n	80036ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b04      	cmp	r3, #4
 8003682:	d104      	bne.n	800368e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800368c:	e00e      	b.n	80036ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d104      	bne.n	800369e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800369c:	e006      	b.n	80036ac <HAL_TIM_PWM_Start_DMA+0x12c>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036a6:	e001      	b.n	80036ac <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e118      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	f200 80ae 	bhi.w	8003810 <HAL_TIM_PWM_Start_DMA+0x290>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	08003811 	.word	0x08003811
 80036c4:	08003811 	.word	0x08003811
 80036c8:	08003811 	.word	0x08003811
 80036cc:	08003739 	.word	0x08003739
 80036d0:	08003811 	.word	0x08003811
 80036d4:	08003811 	.word	0x08003811
 80036d8:	08003811 	.word	0x08003811
 80036dc:	08003781 	.word	0x08003781
 80036e0:	08003811 	.word	0x08003811
 80036e4:	08003811 	.word	0x08003811
 80036e8:	08003811 	.word	0x08003811
 80036ec:	080037c9 	.word	0x080037c9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	4a7c      	ldr	r2, [pc, #496]	; (80038e8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	4a7b      	ldr	r2, [pc, #492]	; (80038ec <HAL_TIM_PWM_Start_DMA+0x36c>)
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	4a7a      	ldr	r2, [pc, #488]	; (80038f0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003706:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3334      	adds	r3, #52	; 0x34
 8003714:	461a      	mov	r2, r3
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	f7fd ff1c 	bl	8001554 <HAL_DMA_Start_IT>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0db      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003734:	60da      	str	r2, [r3, #12]
      break;
 8003736:	e06e      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	4a6a      	ldr	r2, [pc, #424]	; (80038e8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	4a69      	ldr	r2, [pc, #420]	; (80038ec <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	4a68      	ldr	r2, [pc, #416]	; (80038f0 <HAL_TIM_PWM_Start_DMA+0x370>)
 800374e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3338      	adds	r3, #56	; 0x38
 800375c:	461a      	mov	r2, r3
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	f7fd fef8 	bl	8001554 <HAL_DMA_Start_IT>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0b7      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800377c:	60da      	str	r2, [r3, #12]
      break;
 800377e:	e04a      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003786:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	4a57      	ldr	r2, [pc, #348]	; (80038ec <HAL_TIM_PWM_Start_DMA+0x36c>)
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a56      	ldr	r2, [pc, #344]	; (80038f0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003796:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	333c      	adds	r3, #60	; 0x3c
 80037a4:	461a      	mov	r2, r3
 80037a6:	887b      	ldrh	r3, [r7, #2]
 80037a8:	f7fd fed4 	bl	8001554 <HAL_DMA_Start_IT>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e093      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037c4:	60da      	str	r2, [r3, #12]
      break;
 80037c6:	e026      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	4a46      	ldr	r2, [pc, #280]	; (80038e8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80037ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	4a45      	ldr	r2, [pc, #276]	; (80038ec <HAL_TIM_PWM_Start_DMA+0x36c>)
 80037d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4a44      	ldr	r2, [pc, #272]	; (80038f0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80037de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3340      	adds	r3, #64	; 0x40
 80037ec:	461a      	mov	r2, r3
 80037ee:	887b      	ldrh	r3, [r7, #2]
 80037f0:	f7fd feb0 	bl	8001554 <HAL_DMA_Start_IT>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06f      	b.n	80038de <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800380c:	60da      	str	r2, [r3, #12]
      break;
 800380e:	e002      	b.n	8003816 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	75fb      	strb	r3, [r7, #23]
      break;
 8003814:	bf00      	nop
  }

  if (status == HAL_OK)
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d15f      	bne.n	80038dc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2201      	movs	r2, #1
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fe9d 	bl	8004564 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_TIM_PWM_Start_DMA+0x2be>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a2f      	ldr	r2, [pc, #188]	; (80038f8 <HAL_TIM_PWM_Start_DMA+0x378>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003842:	2300      	movs	r3, #0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a25      	ldr	r2, [pc, #148]	; (80038f4 <HAL_TIM_PWM_Start_DMA+0x374>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d022      	beq.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x328>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386a:	d01d      	beq.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x328>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a22      	ldr	r2, [pc, #136]	; (80038fc <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d018      	beq.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x328>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_TIM_PWM_Start_DMA+0x380>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d013      	beq.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x328>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00e      	beq.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x328>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d009      	beq.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x328>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_TIM_PWM_Start_DMA+0x388>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d004      	beq.n	80038a8 <HAL_TIM_PWM_Start_DMA+0x328>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_TIM_PWM_Start_DMA+0x38c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d111      	bne.n	80038cc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d010      	beq.n	80038dc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ca:	e007      	b.n	80038dc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80038dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	08003e81 	.word	0x08003e81
 80038ec:	08003f29 	.word	0x08003f29
 80038f0:	08003def 	.word	0x08003def
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40010400 	.word	0x40010400
 80038fc:	40000400 	.word	0x40000400
 8003900:	40000800 	.word	0x40000800
 8003904:	40000c00 	.word	0x40000c00
 8003908:	40014000 	.word	0x40014000
 800390c:	40001800 	.word	0x40001800

08003910 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b0c      	cmp	r3, #12
 8003922:	d855      	bhi.n	80039d0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003924:	a201      	add	r2, pc, #4	; (adr r2, 800392c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392a:	bf00      	nop
 800392c:	08003961 	.word	0x08003961
 8003930:	080039d1 	.word	0x080039d1
 8003934:	080039d1 	.word	0x080039d1
 8003938:	080039d1 	.word	0x080039d1
 800393c:	0800397d 	.word	0x0800397d
 8003940:	080039d1 	.word	0x080039d1
 8003944:	080039d1 	.word	0x080039d1
 8003948:	080039d1 	.word	0x080039d1
 800394c:	08003999 	.word	0x08003999
 8003950:	080039d1 	.word	0x080039d1
 8003954:	080039d1 	.word	0x080039d1
 8003958:	080039d1 	.word	0x080039d1
 800395c:	080039b5 	.word	0x080039b5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800396e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fe45 	bl	8001604 <HAL_DMA_Abort_IT>
      break;
 800397a:	e02c      	b.n	80039d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd fe37 	bl	8001604 <HAL_DMA_Abort_IT>
      break;
 8003996:	e01e      	b.n	80039d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fe29 	bl	8001604 <HAL_DMA_Abort_IT>
      break;
 80039b2:	e010      	b.n	80039d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd fe1b 	bl	8001604 <HAL_DMA_Abort_IT>
      break;
 80039ce:	e002      	b.n	80039d6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d161      	bne.n	8003aa0 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2200      	movs	r2, #0
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fdbd 	bl	8004564 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2f      	ldr	r2, [pc, #188]	; (8003aac <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_TIM_PWM_Stop_DMA+0xee>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a2d      	ldr	r2, [pc, #180]	; (8003ab0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_PWM_Stop_DMA+0xf2>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d017      	beq.n	8003a38 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a1a      	ldr	r2, [r3, #32]
 8003a0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	f240 4344 	movw	r3, #1092	; 0x444
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10f      	bne.n	8003a68 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a1a      	ldr	r2, [r3, #32]
 8003a4e:	f240 4344 	movw	r3, #1092	; 0x444
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d107      	bne.n	8003a68 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a76:	e013      	b.n	8003aa0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d104      	bne.n	8003a88 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a86:	e00b      	b.n	8003aa0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d104      	bne.n	8003a98 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a96:	e003      	b.n	8003aa0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40010000 	.word	0x40010000
 8003ab0:	40010400 	.word	0x40010400

08003ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e0ae      	b.n	8003c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	f200 809f 	bhi.w	8003c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ae2:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae8:	08003b1d 	.word	0x08003b1d
 8003aec:	08003c21 	.word	0x08003c21
 8003af0:	08003c21 	.word	0x08003c21
 8003af4:	08003c21 	.word	0x08003c21
 8003af8:	08003b5d 	.word	0x08003b5d
 8003afc:	08003c21 	.word	0x08003c21
 8003b00:	08003c21 	.word	0x08003c21
 8003b04:	08003c21 	.word	0x08003c21
 8003b08:	08003b9f 	.word	0x08003b9f
 8003b0c:	08003c21 	.word	0x08003c21
 8003b10:	08003c21 	.word	0x08003c21
 8003b14:	08003c21 	.word	0x08003c21
 8003b18:	08003bdf 	.word	0x08003bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fad4 	bl	80040d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0204 	bic.w	r2, r2, #4
 8003b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6999      	ldr	r1, [r3, #24]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	619a      	str	r2, [r3, #24]
      break;
 8003b5a:	e064      	b.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fb24 	bl	80041b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6999      	ldr	r1, [r3, #24]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]
      break;
 8003b9c:	e043      	b.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fb79 	bl	800429c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0208 	orr.w	r2, r2, #8
 8003bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0204 	bic.w	r2, r2, #4
 8003bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69d9      	ldr	r1, [r3, #28]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	61da      	str	r2, [r3, #28]
      break;
 8003bdc:	e023      	b.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fbcd 	bl	8004384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69d9      	ldr	r1, [r3, #28]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	021a      	lsls	r2, r3, #8
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	61da      	str	r2, [r3, #28]
      break;
 8003c1e:	e002      	b.n	8003c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	75fb      	strb	r3, [r7, #23]
      break;
 8003c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIM_ConfigClockSource+0x1c>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0b4      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x186>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8c:	d03e      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0xd4>
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	f200 8087 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	f000 8086 	beq.w	8003daa <HAL_TIM_ConfigClockSource+0x172>
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d87f      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b70      	cmp	r3, #112	; 0x70
 8003ca6:	d01a      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xa6>
 8003ca8:	2b70      	cmp	r3, #112	; 0x70
 8003caa:	d87b      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b60      	cmp	r3, #96	; 0x60
 8003cae:	d050      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x11a>
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d877      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d03c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0xfa>
 8003cb8:	2b50      	cmp	r3, #80	; 0x50
 8003cba:	d873      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d058      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x13a>
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d86f      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d064      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d86b      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d060      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d867      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05c      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d05a      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	e062      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f000 fc19 	bl	8004524 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	609a      	str	r2, [r3, #8]
      break;
 8003d0a:	e04f      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6899      	ldr	r1, [r3, #8]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f000 fc02 	bl	8004524 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2e:	609a      	str	r2, [r3, #8]
      break;
 8003d30:	e03c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f000 fb76 	bl	8004430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2150      	movs	r1, #80	; 0x50
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fbcf 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003d50:	e02c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6859      	ldr	r1, [r3, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f000 fb95 	bl	800448e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2160      	movs	r1, #96	; 0x60
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fbbf 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003d70:	e01c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f000 fb56 	bl	8004430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2140      	movs	r1, #64	; 0x40
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fbaf 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003d90:	e00c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f000 fba6 	bl	80044ee <TIM_ITRx_SetConfig>
      break;
 8003da2:	e003      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	e000      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d107      	bne.n	8003e16 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e14:	e02a      	b.n	8003e6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d107      	bne.n	8003e30 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2202      	movs	r2, #2
 8003e24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e2e:	e01d      	b.n	8003e6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d107      	bne.n	8003e4a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e48:	e010      	b.n	8003e6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d107      	bne.n	8003e64 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2208      	movs	r2, #8
 8003e58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e62:	e003      	b.n	8003e6c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f7ff ffb4 	bl	8003dda <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d10b      	bne.n	8003eb0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d136      	bne.n	8003f14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eae:	e031      	b.n	8003f14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d10b      	bne.n	8003ed2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d125      	bne.n	8003f14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed0:	e020      	b.n	8003f14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d10b      	bne.n	8003ef4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2204      	movs	r2, #4
 8003ee0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d114      	bne.n	8003f14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ef2:	e00f      	b.n	8003f14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d10a      	bne.n	8003f14 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2208      	movs	r2, #8
 8003f02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7fc faf7 	bl	8000508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d103      	bne.n	8003f48 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	771a      	strb	r2, [r3, #28]
 8003f46:	e019      	b.n	8003f7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d103      	bne.n	8003f5a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2202      	movs	r2, #2
 8003f56:	771a      	strb	r2, [r3, #28]
 8003f58:	e010      	b.n	8003f7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d103      	bne.n	8003f6c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2204      	movs	r2, #4
 8003f68:	771a      	strb	r2, [r3, #28]
 8003f6a:	e007      	b.n	8003f7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d102      	bne.n	8003f7c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff ff22 	bl	8003dc6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a40      	ldr	r2, [pc, #256]	; (80040a4 <TIM_Base_SetConfig+0x114>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d013      	beq.n	8003fd0 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fae:	d00f      	beq.n	8003fd0 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <TIM_Base_SetConfig+0x118>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00b      	beq.n	8003fd0 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3c      	ldr	r2, [pc, #240]	; (80040ac <TIM_Base_SetConfig+0x11c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3b      	ldr	r2, [pc, #236]	; (80040b0 <TIM_Base_SetConfig+0x120>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <TIM_Base_SetConfig+0x40>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3a      	ldr	r2, [pc, #232]	; (80040b4 <TIM_Base_SetConfig+0x124>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d108      	bne.n	8003fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a2f      	ldr	r2, [pc, #188]	; (80040a4 <TIM_Base_SetConfig+0x114>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d02b      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d027      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2c      	ldr	r2, [pc, #176]	; (80040a8 <TIM_Base_SetConfig+0x118>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d023      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <TIM_Base_SetConfig+0x11c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01f      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a2a      	ldr	r2, [pc, #168]	; (80040b0 <TIM_Base_SetConfig+0x120>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01b      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a29      	ldr	r2, [pc, #164]	; (80040b4 <TIM_Base_SetConfig+0x124>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d017      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a28      	ldr	r2, [pc, #160]	; (80040b8 <TIM_Base_SetConfig+0x128>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a27      	ldr	r2, [pc, #156]	; (80040bc <TIM_Base_SetConfig+0x12c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00f      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <TIM_Base_SetConfig+0x130>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00b      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a25      	ldr	r2, [pc, #148]	; (80040c4 <TIM_Base_SetConfig+0x134>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a24      	ldr	r2, [pc, #144]	; (80040c8 <TIM_Base_SetConfig+0x138>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a23      	ldr	r2, [pc, #140]	; (80040cc <TIM_Base_SetConfig+0x13c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d108      	bne.n	8004054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <TIM_Base_SetConfig+0x114>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_Base_SetConfig+0xf8>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <TIM_Base_SetConfig+0x124>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d103      	bne.n	8004090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	615a      	str	r2, [r3, #20]
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40000800 	.word	0x40000800
 80040b0:	40000c00 	.word	0x40000c00
 80040b4:	40010400 	.word	0x40010400
 80040b8:	40014000 	.word	0x40014000
 80040bc:	40014400 	.word	0x40014400
 80040c0:	40014800 	.word	0x40014800
 80040c4:	40001800 	.word	0x40001800
 80040c8:	40001c00 	.word	0x40001c00
 80040cc:	40002000 	.word	0x40002000

080040d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f023 0302 	bic.w	r3, r3, #2
 8004118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <TIM_OC1_SetConfig+0xd8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d003      	beq.n	8004134 <TIM_OC1_SetConfig+0x64>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <TIM_OC1_SetConfig+0xdc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10c      	bne.n	800414e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f023 0308 	bic.w	r3, r3, #8
 800413a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 0304 	bic.w	r3, r3, #4
 800414c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <TIM_OC1_SetConfig+0xd8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d003      	beq.n	800415e <TIM_OC1_SetConfig+0x8e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a14      	ldr	r2, [pc, #80]	; (80041ac <TIM_OC1_SetConfig+0xdc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d111      	bne.n	8004182 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40010000 	.word	0x40010000
 80041ac:	40010400 	.word	0x40010400

080041b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0210 	bic.w	r2, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0320 	bic.w	r3, r3, #32
 80041fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a22      	ldr	r2, [pc, #136]	; (8004294 <TIM_OC2_SetConfig+0xe4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <TIM_OC2_SetConfig+0x68>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a21      	ldr	r2, [pc, #132]	; (8004298 <TIM_OC2_SetConfig+0xe8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10d      	bne.n	8004234 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a17      	ldr	r2, [pc, #92]	; (8004294 <TIM_OC2_SetConfig+0xe4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <TIM_OC2_SetConfig+0x94>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a16      	ldr	r2, [pc, #88]	; (8004298 <TIM_OC2_SetConfig+0xe8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d113      	bne.n	800426c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800424a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000
 8004298:	40010400 	.word	0x40010400

0800429c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4313      	orrs	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a21      	ldr	r2, [pc, #132]	; (800437c <TIM_OC3_SetConfig+0xe0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_OC3_SetConfig+0x66>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a20      	ldr	r2, [pc, #128]	; (8004380 <TIM_OC3_SetConfig+0xe4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10d      	bne.n	800431e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004308:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800431c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a16      	ldr	r2, [pc, #88]	; (800437c <TIM_OC3_SetConfig+0xe0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_OC3_SetConfig+0x92>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a15      	ldr	r2, [pc, #84]	; (8004380 <TIM_OC3_SetConfig+0xe4>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d113      	bne.n	8004356 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40010000 	.word	0x40010000
 8004380:	40010400 	.word	0x40010400

08004384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	031b      	lsls	r3, r3, #12
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a12      	ldr	r2, [pc, #72]	; (8004428 <TIM_OC4_SetConfig+0xa4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_OC4_SetConfig+0x68>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a11      	ldr	r2, [pc, #68]	; (800442c <TIM_OC4_SetConfig+0xa8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d109      	bne.n	8004400 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40010000 	.word	0x40010000
 800442c:	40010400 	.word	0x40010400

08004430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f023 0201 	bic.w	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800445a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 030a 	bic.w	r3, r3, #10
 800446c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	621a      	str	r2, [r3, #32]
}
 8004482:	bf00      	nop
 8004484:	371c      	adds	r7, #28
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800448e:	b480      	push	{r7}
 8004490:	b087      	sub	sp, #28
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0210 	bic.w	r2, r3, #16
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	031b      	lsls	r3, r3, #12
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	621a      	str	r2, [r3, #32]
}
 80044e2:	bf00      	nop
 80044e4:	371c      	adds	r7, #28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b085      	sub	sp, #20
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	f043 0307 	orr.w	r3, r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800453e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	431a      	orrs	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	609a      	str	r2, [r3, #8]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e05a      	b.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a21      	ldr	r2, [pc, #132]	; (800468c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d022      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d01d      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d10c      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	4313      	orrs	r3, r2
 8004662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40010400 	.word	0x40010400
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40001800 	.word	0x40001800

080046a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e03f      	b.n	800473a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc fbba 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f829 	bl	8004744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004748:	b0c0      	sub	sp, #256	; 0x100
 800474a:	af00      	add	r7, sp, #0
 800474c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	68d9      	ldr	r1, [r3, #12]
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	ea40 0301 	orr.w	r3, r0, r1
 800476c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800476e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	431a      	orrs	r2, r3
 800477c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	431a      	orrs	r2, r3
 8004784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800479c:	f021 010c 	bic.w	r1, r1, #12
 80047a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047aa:	430b      	orrs	r3, r1
 80047ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047be:	6999      	ldr	r1, [r3, #24]
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	ea40 0301 	orr.w	r3, r0, r1
 80047ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b8f      	ldr	r3, [pc, #572]	; (8004a10 <UART_SetConfig+0x2cc>)
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d005      	beq.n	80047e4 <UART_SetConfig+0xa0>
 80047d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b8d      	ldr	r3, [pc, #564]	; (8004a14 <UART_SetConfig+0x2d0>)
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d104      	bne.n	80047ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047e4:	f7fd fdae 	bl	8002344 <HAL_RCC_GetPCLK2Freq>
 80047e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80047ec:	e003      	b.n	80047f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ee:	f7fd fd95 	bl	800231c <HAL_RCC_GetPCLK1Freq>
 80047f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	f040 810c 	bne.w	8004a1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004808:	2200      	movs	r2, #0
 800480a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800480e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004816:	4622      	mov	r2, r4
 8004818:	462b      	mov	r3, r5
 800481a:	1891      	adds	r1, r2, r2
 800481c:	65b9      	str	r1, [r7, #88]	; 0x58
 800481e:	415b      	adcs	r3, r3
 8004820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004826:	4621      	mov	r1, r4
 8004828:	eb12 0801 	adds.w	r8, r2, r1
 800482c:	4629      	mov	r1, r5
 800482e:	eb43 0901 	adc.w	r9, r3, r1
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800483e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004846:	4690      	mov	r8, r2
 8004848:	4699      	mov	r9, r3
 800484a:	4623      	mov	r3, r4
 800484c:	eb18 0303 	adds.w	r3, r8, r3
 8004850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004854:	462b      	mov	r3, r5
 8004856:	eb49 0303 	adc.w	r3, r9, r3
 800485a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800486a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800486e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004872:	460b      	mov	r3, r1
 8004874:	18db      	adds	r3, r3, r3
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
 8004878:	4613      	mov	r3, r2
 800487a:	eb42 0303 	adc.w	r3, r2, r3
 800487e:	657b      	str	r3, [r7, #84]	; 0x54
 8004880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004888:	f7fb fcbc 	bl	8000204 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b61      	ldr	r3, [pc, #388]	; (8004a18 <UART_SetConfig+0x2d4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011c      	lsls	r4, r3, #4
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048b4:	415b      	adcs	r3, r3
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048bc:	4641      	mov	r1, r8
 80048be:	eb12 0a01 	adds.w	sl, r2, r1
 80048c2:	4649      	mov	r1, r9
 80048c4:	eb43 0b01 	adc.w	fp, r3, r1
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048dc:	4692      	mov	sl, r2
 80048de:	469b      	mov	fp, r3
 80048e0:	4643      	mov	r3, r8
 80048e2:	eb1a 0303 	adds.w	r3, sl, r3
 80048e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ea:	464b      	mov	r3, r9
 80048ec:	eb4b 0303 	adc.w	r3, fp, r3
 80048f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004900:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004908:	460b      	mov	r3, r1
 800490a:	18db      	adds	r3, r3, r3
 800490c:	643b      	str	r3, [r7, #64]	; 0x40
 800490e:	4613      	mov	r3, r2
 8004910:	eb42 0303 	adc.w	r3, r2, r3
 8004914:	647b      	str	r3, [r7, #68]	; 0x44
 8004916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800491a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800491e:	f7fb fc71 	bl	8000204 <__aeabi_uldivmod>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4611      	mov	r1, r2
 8004928:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <UART_SetConfig+0x2d4>)
 800492a:	fba3 2301 	umull	r2, r3, r3, r1
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2264      	movs	r2, #100	; 0x64
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	1acb      	subs	r3, r1, r3
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800493e:	4b36      	ldr	r3, [pc, #216]	; (8004a18 <UART_SetConfig+0x2d4>)
 8004940:	fba3 2302 	umull	r2, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800494c:	441c      	add	r4, r3
 800494e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004952:	2200      	movs	r2, #0
 8004954:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004958:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800495c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004960:	4642      	mov	r2, r8
 8004962:	464b      	mov	r3, r9
 8004964:	1891      	adds	r1, r2, r2
 8004966:	63b9      	str	r1, [r7, #56]	; 0x38
 8004968:	415b      	adcs	r3, r3
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004970:	4641      	mov	r1, r8
 8004972:	1851      	adds	r1, r2, r1
 8004974:	6339      	str	r1, [r7, #48]	; 0x30
 8004976:	4649      	mov	r1, r9
 8004978:	414b      	adcs	r3, r1
 800497a:	637b      	str	r3, [r7, #52]	; 0x34
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004988:	4659      	mov	r1, fp
 800498a:	00cb      	lsls	r3, r1, #3
 800498c:	4651      	mov	r1, sl
 800498e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004992:	4651      	mov	r1, sl
 8004994:	00ca      	lsls	r2, r1, #3
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	4603      	mov	r3, r0
 800499c:	4642      	mov	r2, r8
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049a4:	464b      	mov	r3, r9
 80049a6:	460a      	mov	r2, r1
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049c4:	460b      	mov	r3, r1
 80049c6:	18db      	adds	r3, r3, r3
 80049c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ca:	4613      	mov	r3, r2
 80049cc:	eb42 0303 	adc.w	r3, r2, r3
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80049da:	f7fb fc13 	bl	8000204 <__aeabi_uldivmod>
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <UART_SetConfig+0x2d4>)
 80049e4:	fba3 1302 	umull	r1, r3, r3, r2
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	2164      	movs	r1, #100	; 0x64
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	3332      	adds	r3, #50	; 0x32
 80049f6:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <UART_SetConfig+0x2d4>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	f003 0207 	and.w	r2, r3, #7
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4422      	add	r2, r4
 8004a0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a0c:	e105      	b.n	8004c1a <UART_SetConfig+0x4d6>
 8004a0e:	bf00      	nop
 8004a10:	40011000 	.word	0x40011000
 8004a14:	40011400 	.word	0x40011400
 8004a18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a2e:	4642      	mov	r2, r8
 8004a30:	464b      	mov	r3, r9
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	6239      	str	r1, [r7, #32]
 8004a36:	415b      	adcs	r3, r3
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a3e:	4641      	mov	r1, r8
 8004a40:	1854      	adds	r4, r2, r1
 8004a42:	4649      	mov	r1, r9
 8004a44:	eb43 0501 	adc.w	r5, r3, r1
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	00eb      	lsls	r3, r5, #3
 8004a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a56:	00e2      	lsls	r2, r4, #3
 8004a58:	4614      	mov	r4, r2
 8004a5a:	461d      	mov	r5, r3
 8004a5c:	4643      	mov	r3, r8
 8004a5e:	18e3      	adds	r3, r4, r3
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a64:	464b      	mov	r3, r9
 8004a66:	eb45 0303 	adc.w	r3, r5, r3
 8004a6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	008b      	lsls	r3, r1, #2
 8004a8e:	4621      	mov	r1, r4
 8004a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a94:	4621      	mov	r1, r4
 8004a96:	008a      	lsls	r2, r1, #2
 8004a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a9c:	f7fb fbb2 	bl	8000204 <__aeabi_uldivmod>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4b60      	ldr	r3, [pc, #384]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	011c      	lsls	r4, r3, #4
 8004aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ab8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004abc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	1891      	adds	r1, r2, r2
 8004ac6:	61b9      	str	r1, [r7, #24]
 8004ac8:	415b      	adcs	r3, r3
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	1851      	adds	r1, r2, r1
 8004ad4:	6139      	str	r1, [r7, #16]
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	414b      	adcs	r3, r1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	f04f 0300 	mov.w	r3, #0
 8004ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae8:	4659      	mov	r1, fp
 8004aea:	00cb      	lsls	r3, r1, #3
 8004aec:	4651      	mov	r1, sl
 8004aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af2:	4651      	mov	r1, sl
 8004af4:	00ca      	lsls	r2, r1, #3
 8004af6:	4610      	mov	r0, r2
 8004af8:	4619      	mov	r1, r3
 8004afa:	4603      	mov	r3, r0
 8004afc:	4642      	mov	r2, r8
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b04:	464b      	mov	r3, r9
 8004b06:	460a      	mov	r2, r1
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b28:	4649      	mov	r1, r9
 8004b2a:	008b      	lsls	r3, r1, #2
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b32:	4641      	mov	r1, r8
 8004b34:	008a      	lsls	r2, r1, #2
 8004b36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b3a:	f7fb fb63 	bl	8000204 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4b39      	ldr	r3, [pc, #228]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004b44:	fba3 1302 	umull	r1, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2164      	movs	r1, #100	; 0x64
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b62:	441c      	add	r4, r3
 8004b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b68:	2200      	movs	r2, #0
 8004b6a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b6c:	677a      	str	r2, [r7, #116]	; 0x74
 8004b6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b72:	4642      	mov	r2, r8
 8004b74:	464b      	mov	r3, r9
 8004b76:	1891      	adds	r1, r2, r2
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	415b      	adcs	r3, r3
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b82:	4641      	mov	r1, r8
 8004b84:	1851      	adds	r1, r2, r1
 8004b86:	6039      	str	r1, [r7, #0]
 8004b88:	4649      	mov	r1, r9
 8004b8a:	414b      	adcs	r3, r1
 8004b8c:	607b      	str	r3, [r7, #4]
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b9a:	4659      	mov	r1, fp
 8004b9c:	00cb      	lsls	r3, r1, #3
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	00ca      	lsls	r2, r1, #3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	4603      	mov	r3, r0
 8004bae:	4642      	mov	r2, r8
 8004bb0:	189b      	adds	r3, r3, r2
 8004bb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	460a      	mov	r2, r1
 8004bb8:	eb42 0303 	adc.w	r3, r2, r3
 8004bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	663b      	str	r3, [r7, #96]	; 0x60
 8004bc8:	667a      	str	r2, [r7, #100]	; 0x64
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	008b      	lsls	r3, r1, #2
 8004bda:	4641      	mov	r1, r8
 8004bdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be0:	4641      	mov	r1, r8
 8004be2:	008a      	lsls	r2, r1, #2
 8004be4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004be8:	f7fb fb0c 	bl	8000204 <__aeabi_uldivmod>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	2164      	movs	r1, #100	; 0x64
 8004bfa:	fb01 f303 	mul.w	r3, r1, r3
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	3332      	adds	r3, #50	; 0x32
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <UART_SetConfig+0x4e4>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	095b      	lsrs	r3, r3, #5
 8004c0c:	f003 020f 	and.w	r2, r3, #15
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4422      	add	r2, r4
 8004c18:	609a      	str	r2, [r3, #8]
}
 8004c1a:	bf00      	nop
 8004c1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c20:	46bd      	mov	sp, r7
 8004c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c26:	bf00      	nop
 8004c28:	51eb851f 	.word	0x51eb851f

08004c2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	f107 001c 	add.w	r0, r7, #28
 8004c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d122      	bne.n	8004c8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d105      	bne.n	8004c7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa9c 	bl	80051bc <USB_CoreReset>
 8004c84:	4603      	mov	r3, r0
 8004c86:	73fb      	strb	r3, [r7, #15]
 8004c88:	e01a      	b.n	8004cc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa90 	bl	80051bc <USB_CoreReset>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d106      	bne.n	8004cb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
 8004cb2:	e005      	b.n	8004cc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d10b      	bne.n	8004cde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f043 0206 	orr.w	r2, r3, #6
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f043 0220 	orr.w	r2, r3, #32
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cea:	b004      	add	sp, #16
 8004cec:	4770      	bx	lr

08004cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f023 0201 	bic.w	r2, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d115      	bne.n	8004d5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d3e:	2001      	movs	r0, #1
 8004d40:	f7fc fa24 	bl	800118c <HAL_Delay>
      ms++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3301      	adds	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fa28 	bl	80051a0 <USB_GetMode>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d01e      	beq.n	8004d94 <USB_SetCurrentMode+0x84>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b31      	cmp	r3, #49	; 0x31
 8004d5a:	d9f0      	bls.n	8004d3e <USB_SetCurrentMode+0x2e>
 8004d5c:	e01a      	b.n	8004d94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d115      	bne.n	8004d90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d70:	2001      	movs	r0, #1
 8004d72:	f7fc fa0b 	bl	800118c <HAL_Delay>
      ms++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fa0f 	bl	80051a0 <USB_GetMode>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <USB_SetCurrentMode+0x84>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b31      	cmp	r3, #49	; 0x31
 8004d8c:	d9f0      	bls.n	8004d70 <USB_SetCurrentMode+0x60>
 8004d8e:	e001      	b.n	8004d94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e005      	b.n	8004da0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b32      	cmp	r3, #50	; 0x32
 8004d98:	d101      	bne.n	8004d9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004da8:	b084      	sub	sp, #16
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	e009      	b.n	8004ddc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3340      	adds	r3, #64	; 0x40
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b0e      	cmp	r3, #14
 8004de0:	d9f2      	bls.n	8004dc8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11c      	bne.n	8004e22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	e005      	b.n	8004e2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e34:	461a      	mov	r2, r3
 8004e36:	2300      	movs	r3, #0
 8004e38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e40:	4619      	mov	r1, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e48:	461a      	mov	r2, r3
 8004e4a:	680b      	ldr	r3, [r1, #0]
 8004e4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10c      	bne.n	8004e6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f965 	bl	800512c <USB_SetDevSpeed>
 8004e62:	e008      	b.n	8004e76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e64:	2101      	movs	r1, #1
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f960 	bl	800512c <USB_SetDevSpeed>
 8004e6c:	e003      	b.n	8004e76 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e6e:	2103      	movs	r1, #3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f95b 	bl	800512c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e76:	2110      	movs	r1, #16
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f8f3 	bl	8005064 <USB_FlushTxFifo>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d001      	beq.n	8004e88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f91f 	bl	80050cc <USB_FlushRxFifo>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	e043      	b.n	8004f4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed8:	d118      	bne.n	8004f0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10a      	bne.n	8004ef6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eec:	461a      	mov	r2, r3
 8004eee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	e013      	b.n	8004f1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f02:	461a      	mov	r2, r3
 8004f04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e008      	b.n	8004f1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	461a      	mov	r2, r3
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	3301      	adds	r3, #1
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d3b7      	bcc.n	8004ec2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
 8004f56:	e043      	b.n	8004fe0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f6e:	d118      	bne.n	8004fa2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	461a      	mov	r2, r3
 8004f84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f88:	6013      	str	r3, [r2, #0]
 8004f8a:	e013      	b.n	8004fb4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	e008      	b.n	8004fb4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d3b7      	bcc.n	8004f58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ffa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005008:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800500a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500c:	2b00      	cmp	r3, #0
 800500e:	d105      	bne.n	800501c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f043 0210 	orr.w	r2, r3, #16
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699a      	ldr	r2, [r3, #24]
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <USB_DevInit+0x2b8>)
 8005022:	4313      	orrs	r3, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f043 0208 	orr.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800503a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d107      	bne.n	8005050 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005050:	7dfb      	ldrb	r3, [r7, #23]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800505c:	b004      	add	sp, #16
 800505e:	4770      	bx	lr
 8005060:	803c3800 	.word	0x803c3800

08005064 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3301      	adds	r3, #1
 8005076:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <USB_FlushTxFifo+0x64>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e01b      	b.n	80050bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	daf2      	bge.n	8005072 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	019b      	lsls	r3, r3, #6
 8005094:	f043 0220 	orr.w	r2, r3, #32
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <USB_FlushTxFifo+0x64>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e006      	b.n	80050bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d0f0      	beq.n	800509c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	00030d40 	.word	0x00030d40

080050cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3301      	adds	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a11      	ldr	r2, [pc, #68]	; (8005128 <USB_FlushRxFifo+0x5c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e018      	b.n	800511c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	daf2      	bge.n	80050d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2210      	movs	r2, #16
 80050fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3301      	adds	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <USB_FlushRxFifo+0x5c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e006      	b.n	800511c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b10      	cmp	r3, #16
 8005118:	d0f0      	beq.n	80050fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	00030d40 	.word	0x00030d40

0800512c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005178:	f023 0303 	bic.w	r3, r3, #3
 800517c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0301 	and.w	r3, r3, #1
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3301      	adds	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4a13      	ldr	r2, [pc, #76]	; (8005220 <USB_CoreReset+0x64>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e01b      	b.n	8005212 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	daf2      	bge.n	80051c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f043 0201 	orr.w	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a09      	ldr	r2, [pc, #36]	; (8005220 <USB_CoreReset+0x64>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e006      	b.n	8005212 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d0f0      	beq.n	80051f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	00030d40 	.word	0x00030d40

08005224 <__libc_init_array>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4d0d      	ldr	r5, [pc, #52]	; (800525c <__libc_init_array+0x38>)
 8005228:	4c0d      	ldr	r4, [pc, #52]	; (8005260 <__libc_init_array+0x3c>)
 800522a:	1b64      	subs	r4, r4, r5
 800522c:	10a4      	asrs	r4, r4, #2
 800522e:	2600      	movs	r6, #0
 8005230:	42a6      	cmp	r6, r4
 8005232:	d109      	bne.n	8005248 <__libc_init_array+0x24>
 8005234:	4d0b      	ldr	r5, [pc, #44]	; (8005264 <__libc_init_array+0x40>)
 8005236:	4c0c      	ldr	r4, [pc, #48]	; (8005268 <__libc_init_array+0x44>)
 8005238:	f000 f820 	bl	800527c <_init>
 800523c:	1b64      	subs	r4, r4, r5
 800523e:	10a4      	asrs	r4, r4, #2
 8005240:	2600      	movs	r6, #0
 8005242:	42a6      	cmp	r6, r4
 8005244:	d105      	bne.n	8005252 <__libc_init_array+0x2e>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	f855 3b04 	ldr.w	r3, [r5], #4
 800524c:	4798      	blx	r3
 800524e:	3601      	adds	r6, #1
 8005250:	e7ee      	b.n	8005230 <__libc_init_array+0xc>
 8005252:	f855 3b04 	ldr.w	r3, [r5], #4
 8005256:	4798      	blx	r3
 8005258:	3601      	adds	r6, #1
 800525a:	e7f2      	b.n	8005242 <__libc_init_array+0x1e>
 800525c:	080052bc 	.word	0x080052bc
 8005260:	080052bc 	.word	0x080052bc
 8005264:	080052bc 	.word	0x080052bc
 8005268:	080052c0 	.word	0x080052c0

0800526c <memset>:
 800526c:	4402      	add	r2, r0
 800526e:	4603      	mov	r3, r0
 8005270:	4293      	cmp	r3, r2
 8005272:	d100      	bne.n	8005276 <memset+0xa>
 8005274:	4770      	bx	lr
 8005276:	f803 1b01 	strb.w	r1, [r3], #1
 800527a:	e7f9      	b.n	8005270 <memset+0x4>

0800527c <_init>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr

08005288 <_fini>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr
